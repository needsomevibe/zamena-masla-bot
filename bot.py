import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter
import googlemaps
import aiosqlite
from keep_alive import keep_alive
import os
from dotenv import load_dotenv
from math import radians, sin, cos, sqrt, atan2

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('token.env')

# API Keys and Configuration
BOT_TOKEN = os.getenv('BOT_TOKEN')
GOOGLE_PLACES_API_KEY = "AIzaSyB6IPLVxeFvSPLRuHMNiMQLN3zk_fsXCms"
GMAPS = googlemaps.Client(key=GOOGLE_PLACES_API_KEY)

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States
class UserState(StatesGroup):
    language = State()
    phone = State()
    main_menu = State()
    brand = State()
    model = State()
    manual_model = State()
    mileage = State()
    oil_type = State()
    location = State()

# Keyboards
language_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")],
        [KeyboardButton(text="–£–∑–±–µ–∫—Å–∫–∏–π üá∫üáø")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

def create_phone_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, "share_phone_button"), request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def create_main_menu_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, "my_cars_button"))],
            [KeyboardButton(text=get_translation(language, "contact_button"))],
            [KeyboardButton(text=get_translation(language, "nearest_sto_button"))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def create_my_cars_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, "add_car_button"))],
            [KeyboardButton(text=get_translation(language, "main_menu_button"))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def create_back_main_menu_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_translation(language, "back_button"))],
            [KeyboardButton(text=get_translation(language, "main_menu_button"))]
        ],
        resize_keyboard=True
    )

# Popular car brands in Uzbekistan (example)
popular_brands_uz = [
    "Chevrolet", "Hyundai", "Kia",
    "BYD", "Toyota", "–î—Ä—É–≥–æ–µ"
]

def create_brand_keyboard():
    row1 = [KeyboardButton(text=brand) for brand in popular_brands_uz[:3]]
    row2 = [KeyboardButton(text=brand) for brand in popular_brands_uz[3:]]
    keyboard = [row1, row2]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

# Popular models for each brand
popular_models = {
    "Chevrolet": ["Nexia", "Cobalt", "Gentra", "Tracker", "Onix", "–î—Ä—É–≥–æ–µ"],
    "Hyundai": ["Sonata", "Elantra", "Tucson", "Santa Fe", "Creta", "–î—Ä—É–≥–æ–µ"],
    "Kia": ["K5", "Sportage", "Seltos", "Cerato", "Rio", "–î—Ä—É–≥–æ–µ"],
    "BYD": ["Song Plus", "Qin Plus", "Han", "Tang", "Seal", "–î—Ä—É–≥–æ–µ"],
    "Toyota": ["Corolla", "Camry", "Prado", "Land Cruiser", "RAV4", "–î—Ä—É–≥–æ–µ"],
    "–î—Ä—É–≥–æ–µ": []
}

# Oil recommendations
oil_recommendations = {
    "Chevrolet": {
        "Nexia": "5W-30 (GM Dexos2)",
        "Cobalt": "5W-30 (GM Dexos2)",
        "Gentra": "5W-30 (GM Dexos2)",
        "Tracker": "5W-30 (GM Dexos1 Gen2)",
        "Onix": "0W-20 (GM Dexos1 Gen3)",
        "–î—Ä—É–≥–æ–µ": "5W-30 (GM Dexos2)"
    },
    "Hyundai": {
        "Sonata": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Elantra": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Tucson": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Santa Fe": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Creta": "5W-30 (API SN/SP, ACEA C2/C3)",
        "–î—Ä—É–≥–æ–µ": "5W-30 (API SN/SP, ACEA C2/C3)"
    },
    "Kia": {
        "K5": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Sportage": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Seltos": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Cerato": "5W-30 (API SN/SP, ACEA C2/C3)",
        "Rio": "5W-30 (API SN/SP, ACEA C2/C3)",
        "–î—Ä—É–≥–æ–µ": "5W-30 (API SN/SP, ACEA C2/C3)"
    },
    "BYD": {
        "Song Plus": "0W-20 (API SP, ACEA C5)",
        "Qin Plus": "0W-20 (API SP, ACEA C5)",
        "Han": "0W-20 (API SP, ACEA C5)",
        "Tang": "0W-20 (API SP, ACEA C5)",
        "Seal": "0W-20 (API SP, ACEA C5)",
        "–î—Ä—É–≥–æ–µ": "0W-20 (API SP, ACEA C5)"
    },
    "Toyota": {
        "Corolla": "0W-20 (Toyota Genuine Motor Oil)",
        "Camry": "0W-20 (Toyota Genuine Motor Oil)",
        "Prado": "5W-30 (Toyota Genuine Motor Oil)",
        "Land Cruiser": "5W-30 (Toyota Genuine Motor Oil)",
        "RAV4": "0W-20 (Toyota Genuine Motor Oil)",
        "–î—Ä—É–≥–æ–µ": "5W-30 (Toyota Genuine Motor Oil)"
    },
    "–î—Ä—É–≥–æ–µ": {
        "–î—Ä—É–≥–æ–µ": "5W-30 (API SN/SP, ACEA C2/C3)"
    }
}

# Oil options
oil_options = {
    "5W-30": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ",
    "5W-40": "–î–ª—è –ø—Ä–æ–±–µ–≥–∞",
    "0W-20": "–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–µ–µ"
}

def create_oil_keyboard(language):
    keyboard = [
        [KeyboardButton(text="5W-30\n(–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ)")],
        [KeyboardButton(text="5W-40\n(–î–ª—è –ø—Ä–æ–±–µ–≥–∞)")],
        [KeyboardButton(text="0W-20\n(–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–µ–µ)")],
        [KeyboardButton(text=get_translation(language, "back_button"))],
        [KeyboardButton(text=get_translation(language, "main_menu_button"))]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# Translations
translations = {
    "ru": {
        "start_message": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "phone_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "share_phone_button": "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
        "brand_message": "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        "model_message": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        "manual_model_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Ä—É—á–Ω—É—é:",
        "mileage_message": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∫–º):",
        "oil_type_message": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Å–ª–∞:",
        "location_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        "sto_list_message": "–ë–ª–∏–∂–∞–π—à–∏–µ –°–¢–û:",
        "back_button": "üîô –ù–∞–∑–∞–¥",
        "main_menu_button": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "my_cars_button": "üöó –ú–æ–∏ –∞–≤—Ç–æ",
        "add_car_button": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ",
        "contact_button": "üìû –°–≤—è–∑–∞—Ç—å—Å—è",
        "nearest_sto_button": "üìç –ë–ª–∏–∂–∞–π—à–∏–µ –°–¢–û",
        "invalid_mileage": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
        "error_location": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –°–¢–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "no_sto_found_message": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –°–¢–û.",
        "start_over": "–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? –í–≤–µ–¥–∏—Ç–µ /start",
        "main_menu_message": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "my_cars_message": "–í–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:",
        "no_cars_message": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
    },
    "uz": {
        "start_message": "Salom! Tilni tanlang:",
        "phone_message": "Iltimos, telefon raqamingizni yuboring:",
        "share_phone_button": "üìû Raqamni ulashish",
        "brand_message": "Avtomobilingiz markasini tanlang:",
        "model_message": "Avtomobilingiz modelini kiriting:",
        "manual_model_message": "Iltimos, avtomobilingiz marka va modelini qo'lda kiriting:",
        "mileage_message": "Avtomobilingizning yurgan masofasini kiriting (km):",
        "oil_type_message": "Moy turini tanlang:",
        "location_message": "Iltimos, joylashuvingizni yuboring:",
        "sto_list_message": "Eng yaqin STOlar:",
        "back_button": "üîô –û—Ä—Ç–≥–∞",
        "main_menu_button": "üè† –ê—Å–æ—Å–∏–π –º–µ–Ω—é",
        "my_cars_button": "üöó Mening avtomobillarim",
        "add_car_button": "‚ûï Avtomobil qo'shish",
        "contact_button": "üìû Bog'lanish",
        "nearest_sto_button": "üìç Eng yaqin STO",
        "invalid_mileage": "Noto'g'ri masofa. Raqam kiriting.",
        "error_location": "STOlarni olishda xatolik yuz berdi. Qayta urinib ko'ring.",
        "no_sto_found_message": "Afsuski, yaqin atrofda STO topilmadi.",
        "start_over": "Qayta boshlaymizmi? /start ni kiriting",
        "main_menu_message": "Asosiy menyu:",
        "my_cars_message": "Sizning avtomobillaringiz:",
        "no_cars_message": "Sizda hali avtomobil yo'q. Birinchi avtomobilni qo'shing.",
    }
}

def get_translation(language, key):
    return translations[language][key]

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                language TEXT,
                phone TEXT
            )
            """
        )
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS cars (
                car_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                brand TEXT,
                model TEXT,
                mileage INTEGER,
                oil_type TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
            """
        )
        await db.commit()

async def save_user_data(user_id, language, phone):
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            """
            INSERT INTO users (user_id, language, phone)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                language = excluded.language,
                phone = excluded.phone
            """,
            (user_id, language, phone),
        )
        await db.commit()

async def save_car_data(user_id, brand, model, mileage, oil_type):
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            """
            INSERT INTO cars (user_id, brand, model, mileage, oil_type)
            VALUES (?, ?, ?, ?, ?)
            """,
            (user_id, brand, model, mileage, oil_type),
        )
        await db.commit()

async def get_user_cars(user_id):
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute(
            "SELECT brand, model, mileage, oil_type FROM cars WHERE user_id = ?",
            (user_id,),
        )
        return await cursor.fetchall()

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    distance = R * c
    
    return round(distance * 1000)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ—Ç—Ä–∞—Ö

# Handlers
@dp.message(CommandStart(), StateFilter('*'))
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply(get_translation("ru", "start_message"), reply_markup=language_keyboard)
    await state.set_state(UserState.language)

@dp.message(F.text, StateFilter(UserState.language))
async def set_language(message: types.Message, state: FSMContext):
    language = "ru" if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else "uz"
    await state.update_data(language=language)
    phone_keyboard = create_phone_keyboard(language)
    await message.reply(get_translation(language, "phone_message"), reply_markup=phone_keyboard)
    await state.set_state(UserState.phone)

@dp.message(F.contact, StateFilter(UserState.phone))
async def set_phone(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    await save_user_data(message.from_user.id, language, phone)
    await message.reply(get_translation(language, "main_menu_message"), reply_markup=create_main_menu_keyboard(language))
    await state.set_state(UserState.main_menu)

@dp.message(F.text == get_translation("ru", "main_menu_button"))
async def return_to_main_menu(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    await message.reply(get_translation(language, "main_menu_message"), reply_markup=create_main_menu_keyboard(language))
    await state.set_state(UserState.main_menu)

@dp.message(F.text == get_translation("ru", "my_cars_button"))
async def my_cars(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    cars = await get_user_cars(message.from_user.id)
    
    if cars:
        cars_message = get_translation(language, "my_cars_message") + "\n"
        for car in cars:
            cars_message += f"üöó {car[0]} {car[1]}, –ø—Ä–æ–±–µ–≥: {car[2]} –∫–º, –º–∞—Å–ª–æ: {car[3]}\n"
        await message.reply(cars_message, reply_markup=create_my_cars_keyboard(language))
    else:
        await message.reply(get_translation(language, "no_cars_message"), reply_markup=create_my_cars_keyboard(language))

@dp.message(F.text == get_translation("ru", "add_car_button"))
async def add_car(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    brand_keyboard = create_brand_keyboard()
    await message.reply(get_translation(language, "brand_message"), reply_markup=brand_keyboard)
    await state.set_state(UserState.brand)

@dp.message(F.text == get_translation("ru", "contact_button"))
async def contact(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    await message.reply(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @yrlaurenne", reply_markup=create_main_menu_keyboard(language))

@dp.message(F.text == get_translation("ru", "nearest_sto_button"))
async def nearest_sto(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    await message.reply(get_translation(language, "location_message"), reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserState.location)

@dp.message(F.text, StateFilter(UserState.brand))
async def set_brand(message: types.Message, state: FSMContext):
    brand = message.text
    await state.update_data(brand=brand)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    
    if brand == "–î—Ä—É–≥–æ–µ":
        await message.reply(get_translation(language, "manual_model_message"), reply_markup=ReplyKeyboardRemove())
        await state.set_state(UserState.manual_model)
    else:
        model_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=model)] for model in popular_models.get(brand, [])],
            resize_keyboard=True
        )
        await message.reply(get_translation(language, "model_message"), reply_markup=model_keyboard)
        await state.set_state(UserState.model)

@dp.message(F.text, StateFilter(UserState.model))
async def set_model(message: types.Message, state: FSMContext):
    model = message.text
    await state.update_data(model=model)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    brand = user_data.get("brand")
    recommendation = oil_recommendations.get(brand, {}).get(model, "–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è")
    
    await state.update_data(recommendation=recommendation)
    
    await message.reply(get_translation(language, "mileage_message"), reply_markup=create_back_main_menu_keyboard(language))
    await state.set_state(UserState.mileage)

@dp.message(F.text, StateFilter(UserState.manual_model))
async def set_manual_model(message: types.Message, state: FSMContext):
    manual_model = message.text
    await state.update_data(model=manual_model)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    
    await message.reply(get_translation(language, "mileage_message"), reply_markup=create_back_main_menu_keyboard(language))
    await state.set_state(UserState.mileage)

@dp.message(F.text, StateFilter(UserState.mileage))
async def set_mileage(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(mileage=message.text)
        user_data = await state.get_data()
        language = user_data.get("language", "ru")
        oil_keyboard = create_oil_keyboard(language)
        
        recommendation = user_data.get("recommendation", "–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è")
        
        oil_message = (
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –º–∞—Å–ª–æ: {recommendation}\n"
            f"{get_translation(language, 'oil_type_message')}"
        )
        await message.reply(oil_message, reply_markup=oil_keyboard)
        await state.set_state(UserState.oil_type)
    else:
        user_data = await state.get_data()
        language = user_data.get("language", "ru")
        await message.reply(get_translation(language, "invalid_mileage"), reply_markup=create_back_main_menu_keyboard(language))

@dp.message(F.text, StateFilter(UserState.oil_type))
async def set_oil_type(message: types.Message, state: FSMContext):
    oil_type = message.text
    await state.update_data(oil_type=oil_type)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    
    recommendation = user_data.get("recommendation", "–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è")
    
    oil_confirmation_message = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å–ª–æ: {oil_type}\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –º–∞—Å–ª–æ: {recommendation}\n"
        f"{get_translation(language, 'location_message')}"
    )
    await message.reply(oil_confirmation_message, reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserState.location)

@dp.message(F.location, StateFilter(UserState.location))
async def get_location(message: types.Message, state: FSMContext):
    try:
        latitude = message.location.latitude
        longitude = message.location.longitude
        user_data = await state.get_data()
        language = user_data.get("language", "ru")

        await save_user_data(
            user_id=message.from_user.id,
            language=user_data.get("language"),
            phone=user_data.get("phone")
        )

        places_result = GMAPS.places_nearby(location=(latitude, longitude), radius=5000, type="car_repair")
        
        if places_result.get('results'):
            nearest_places = []
            for place in places_result['results']:
                place_lat = place['geometry']['location']['lat']
                place_lng = place['geometry']['location']['lng']
                distance = calculate_distance(latitude, longitude, place_lat, place_lng)
                place['distance'] = distance
                nearest_places.append(place)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            sorted_places = sorted(nearest_places, key=lambda x: x['distance'])[:5]

            sto_list = []
            for place in sorted_places:
                name = place.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –°–¢–û')
                rating = place.get('rating', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')
                distance = place['distance']  # —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å —Ç–æ—á–Ω–æ –µ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                
                maps_url = f"https://www.google.com/maps/dir/?api=1&destination={place['geometry']['location']['lat']},{place['geometry']['location']['lng']}"
                
                sto_info = (
                    f"üè¢ {name}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                    f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –º\n"
                    f"üó∫Ô∏è [–ú–∞—Ä—à—Ä—É—Ç]({maps_url})\n"
                )
                sto_list.append(sto_info)

            sto_message = f"{get_translation(language, 'sto_list_message')}\n\n" + "\n".join(sto_list)
            await message.reply(sto_message, parse_mode=ParseMode.MARKDOWN, reply_markup=create_main_menu_keyboard(language))
        else:
            await message.reply(get_translation(language, "no_sto_found_message"), reply_markup=create_main_menu_keyboard(language))
    except Exception as e:
        logger.error(f"Error fetching location: {e}")
        await message.reply(get_translation(language, "error_location"), reply_markup=create_main_menu_keyboard(language))

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    keep_alive()
    asyncio.run(main())
